// Generated by CoffeeScript 1.6.3
(function() {
  var IDLE_TIMEOUT_MILLIS, MAX_POOL_SIZE, Pool, ThriftClient, ThriftGuard, guard, thrift, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('lodash');

  thrift = require('thrift');

  Pool = require('generic-pool').Pool;

  MAX_POOL_SIZE = 50;

  IDLE_TIMEOUT_MILLIS = 30000;

  ThriftClient = (function() {
    function ThriftClient(host, port, cls, onEnd, options) {
      this.host = host;
      this.port = port;
      this.cls = cls;
      this.onEnd = onEnd;
      this.options = options;
      this.onTimeout = __bind(this.onTimeout, this);
      this.onClose = __bind(this.onClose, this);
      this.onError = __bind(this.onError, this);
      this.close = __bind(this.close, this);
      this.handleErrors = __bind(this.handleErrors, this);
      this.connect = __bind(this.connect, this);
      this.verbose = options.verbose;
      this.closeCalled = false;
      this.connect();
    }

    ThriftClient.prototype.connect = function() {
      this.connection = thrift.createConnection(this.host, this.port, this.options);
      this.connection.on('error', this.onError);
      this.connection.on('close', this.onClose);
      this.connection.on('timeout', this.onTimeout);
      return this.thrift = thrift.createClient(this.cls, this.connection);
    };

    ThriftClient.prototype.handleErrors = function(err) {
      var cb, id, reqs;
      if (!this.closeCalled) {
        if (typeof this.onEnd === "function") {
          this.onEnd();
        }
      }
      if (this.thrift != null) {
        reqs = this.thrift._reqs;
        for (id in reqs) {
          if (!(reqs.hasOwnProperty(id))) {
            continue;
          }
          cb = reqs[id];
          delete reqs[id];
          cb(err);
        }
        return this.thrift = null;
      }
    };

    ThriftClient.prototype.close = function() {
      var _ref;
      this.closeCalled = true;
      if ((_ref = this.connection) != null) {
        _ref.connection.destroy();
      }
      return this.connection = null;
    };

    ThriftClient.prototype.onError = function(err) {
      this.handleErrors(err != null ? err : new Error('Connection error'));
      if (this.verbose) {
        return console.warn("Thrift error: " + this.host + ":" + this.port + ": " + err, err);
      }
    };

    ThriftClient.prototype.onClose = function() {
      this.handleErrors(new Error('Connection closed'));
      if (this.verbose) {
        return console.warn("Thrift close: " + this.host + ":" + this.port);
      }
    };

    ThriftClient.prototype.onTimeout = function() {
      this.handleErrors(new Error('Connection timeout'));
      if (this.verbose) {
        return console.warn("Thrift timeout: " + this.host + ":" + this.port);
      }
    };

    return ThriftClient;

  })();

  ThriftGuard = (function() {
    function ThriftGuard(host, port, cls, ttypes, options) {
      this.host = host;
      this.port = port;
      this.cls = cls;
      this.ttypes = ttypes;
      this.options = options;
      this.close = __bind(this.close, this);
      this.call = __bind(this.call, this);
      this.destroyClient = __bind(this.destroyClient, this);
      this.createClient = __bind(this.createClient, this);
      this.initProxy = __bind(this.initProxy, this);
      this.initPool = __bind(this.initPool, this);
      if (this.options == null) {
        this.options = {};
      }
      this.initPool();
      this.initProxy();
    }

    ThriftGuard.prototype.initPool = function() {
      var _ref, _ref1;
      return this.pool = Pool({
        name: 'thrift',
        create: this.createClient,
        destroy: this.destroyClient,
        max: (_ref = this.options.maxPoolSize) != null ? _ref : MAX_POOL_SIZE,
        idleTimeoutMillis: (_ref1 = this.options.poolIdleTimeoutMillis) != null ? _ref1 : IDLE_TIMEOUT_MILLIS,
        log: this.options.verbose
      });
    };

    ThriftGuard.prototype.initProxy = function() {
      var isValidMethod, methods, ttypes,
        _this = this;
      this.proxy = {};
      methods = this.cls.Client.prototype;
      isValidMethod = function(value, name) {
        return methods.hasOwnProperty(name) && name.indexOf('send_') === -1 && name.indexOf('recv_') === -1 && typeof value === 'function';
      };
      _(methods).forEach(function(value, name) {
        if (isValidMethod(value, name)) {
          return _this.proxy[name] = function() {
            return _this.call(name, arguments);
          };
        }
      });
      ttypes = this.ttypes;
      _(ttypes).forEach(function(value, name) {
        if (ttypes.hasOwnProperty(name)) {
          return _this.proxy[name] = value;
        }
      });
      return this.proxy.close = this.close;
    };

    ThriftGuard.prototype.createClient = function(cb) {
      var c, onEnd,
        _this = this;
      onEnd = function() {
        return _this.pool.destroy(c);
      };
      c = new ThriftClient(this.host, this.port, this.cls, onEnd, this.options);
      return cb(null, c);
    };

    ThriftGuard.prototype.destroyClient = function(client) {
      return client.close();
    };

    ThriftGuard.prototype.call = function(name, argsObj) {
      var arg, args, cb,
        _this = this;
      args = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = argsObj.length; _i < _len; _i++) {
          arg = argsObj[_i];
          _results.push(arg);
        }
        return _results;
      })();
      cb = args.pop();
      return this.pool.acquire(function(err, client) {
        var t;
        if (err != null) {
          return cb(err);
        }
        args.push(function(err, res) {
          _this.pool.release(client);
          return cb(err, res);
        });
        t = client.thrift;
        return t[name].apply(t, args);
      });
    };

    ThriftGuard.prototype.close = function() {
      var _this = this;
      return this.pool.drain(function() {
        return _this.pool.destroyAllNow();
      });
    };

    return ThriftGuard;

  })();

  guard = function(host, port, cls, ttypes, options) {
    guard = new ThriftGuard(host, port, cls, ttypes, options);
    return guard.proxy;
  };

  guard.ThriftGuard = ThriftGuard;

  module.exports = guard;

}).call(this);
